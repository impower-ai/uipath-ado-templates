parameters:
  - name: project_name
    displayName: "Project Name"
    type: string
  - name: folder
    displayName: "Orchestrator Folder"
    type: string
  - name: uipath_environment
    type: string
  - name: deploy_environment
    type: string
  - name: stage_name
    type: string

stages:
  - stage: Build
    displayName: Build
    jobs:
    - job: Build
      steps:
      - checkout: impower
        name: Checkout_Impower
        displayName: 'Checkout Impower Repository'
        path: impower
      - checkout: target
        name: Checkout_Target_Repository
        displayName: 'Checkout Target Repository' 
        path: target
      - task: UseDotNet@2
        displayName: 'Install SDK'
        inputs:
          version: '5.0.x'
          includePreviewVersions: true

      - task: DotNetCoreCLI@2
        displayName: 'Build Solution'
        inputs:
          command: 'build'
          arguments: '-p:Version=$(Build.BuildNumber)'
          projects: '$(Agent.BuildDirectory)/target/${{ parameters.project_name }}.csproj'
          versioningScheme: 'byBuildNumber'
          outputDir: '$(Build.ArtifactStagingDirectory)'
          selectOrConfig: 'config'
          nugetConfigPath: '$(Agent.BuildDirectory)/impower/utilities/default_nuget.config'

      - task: DotNetCoreCLI@2
        displayName: 'Pack Solution'
        inputs:
          command: 'pack'
          projects: '$(Agent.BuildDirectory)/target/${{ parameters.project_name }}.csproj'
          nobuild: true
          versioningScheme: 'byBuildNumber'
          outputDir: '$(Build.ArtifactStagingDirectory)'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'CSharp Package'
          publishLocation: 'pipeline'

  - stage: ${{ parameters.stage_name }}
    condition: succeeded()
    jobs:
      - deployment: ${{ parameters.stage_name }}_Deploy
        environment: ${{ parameters.deploy_environment }}
        condition: succeeded()
        strategy:
          runOnce:
            deploy:
              steps:
                - task: UiPathDeploy@2
                  inputs:
                    orchestratorConnection: ${{ parameters.uipath_environment }}
                    packagesPath: '$(Pipeline.Workspace)/CSharp Package'
                    folderName: '${{ parameters.folder }}'
                    traceLevel: 'Information'
